apiVersion: policies.kyverno.io/v1alpha1
kind: GeneratingPolicy
metadata:
  name: add-rolebinding
  annotations:
    policies.kyverno.io/title: Add RoleBinding
    policies.kyverno.io/category: Multi-Tenancy
    policies.kyverno.io/subject: RoleBinding
    policies.kyverno.io/minversion: 1.15.0
    policies.kyverno.io/description: >-
      Typically in multi-tenancy and other use cases, when a new Namespace is created,
      users and other principals must be given some permissions to create and interact
      with resources in the Namespace. Very commonly, Roles and RoleBindings are used to
      grant permissions at the Namespace level. This policy generates a RoleBinding
      called `<userName>-admin-binding` in the new Namespace which binds to the ClusterRole
      `admin` as long as a `cluster-admin` did not create the Namespace. Additionally, an annotation
      named `kyverno.io/user` is added to the RoleBinding recording the name of the user responsible
      for the Namespace's creation.
spec:
  evaluation:
    synchronize:
      enabled: true
    admission:
      enabled: true
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE"]
        resources: ["namespaces"]
  matchConditions:
    - name: exclude-cluster-admin
      expression: "!('cluster-admin' in request.userInfo.?groups.orValue([]))"
  variables:
    - name: targetNs
      expression: "object.metadata.name"
    - name: username
      expression: "request.userInfo.username"
  generate:
    - expression: >-
        generator.Apply(variables.targetNs, [
          {
            "kind": dyn("RoleBinding"),
            "apiVersion": dyn("rbac.authorization.k8s.io/v1"),
            "metadata": dyn({
              "name": dyn(string(variables.username) + "-admin-binding"),
              "annotations": dyn({
                "kyverno.io/user": dyn(string(variables.username))
              })
            }),
            "roleRef": dyn({
              "apiGroup": dyn("rbac.authorization.k8s.io"),
              "kind": dyn("ClusterRole"),
              "name": dyn("admin")
            }),
            "subjects": dyn([
              dyn({
                "kind": dyn("User"),
                "name": dyn(string(variables.username))
              })
            ])
          }
        ])