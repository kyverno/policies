# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: protect-node-label
spec:
  steps:
  - name: step-01
    try:
    - script:
        content: |
          kubectl get configmap kyverno -n kyverno -o yaml | sed 's/\[Node\/\*,\*,\*\]//g' - | sed 's/\[Node,\*,\*\]//g' - | kubectl apply -f -
          node=$(kubectl get nodes --no-headers | awk '{print $1}' | head -n 1)
          kubectl label node "$node" foo=bar
    - sleep:
        duration: 5s
  - name: step-02
    try:
    - apply:
        file: ../protect-node-label.yaml
    - assert:
        file: policy-ready.yaml
  - name: step-03
    try:
    - script:
        content: |
          #!/bin/bash
          set -eu
          export USERNAME=nodelabeluser
          export CA=ca.crt
          #### Get CA certificate from kubeconfig assuming it's the first in the list.
          kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}' | base64 --decode > ./ca.crt
          #### Set CLUSTER_SERVER from kubeconfig assuming it's the first in the list.
          CLUSTER_SERVER="$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.server}')"
          #### Set CLUSTER from kubeconfig assuming it's the first in the list.
          CLUSTER="$(kubectl config view --raw -o jsonpath='{.clusters[0].name}')"
          #### Generate private key
          openssl genrsa -out $USERNAME.key 2048
          #### Create CSR
          openssl req -new -key $USERNAME.key -out $USERNAME.csr -subj "/O=testorg/CN=$USERNAME"
          #### Send CSR to kube-apiserver for approval
          cat <<EOF | kubectl apply -f -
          apiVersion: certificates.k8s.io/v1
          kind: CertificateSigningRequest
          metadata:
            name: $USERNAME
          spec:
            request: $(cat $USERNAME.csr | base64 | tr -d '\n')
            signerName: kubernetes.io/kube-apiserver-client
            usages:
            - client auth
          EOF
          #### Approve CSR
          kubectl certificate approve $USERNAME
          #### Download certificate
          kubectl get csr $USERNAME -o jsonpath='{.status.certificate}' | base64 --decode > $USERNAME.crt
          ####
          #### Create the credential object and output the new kubeconfig file
          kubectl config set-credentials $USERNAME --client-certificate=$USERNAME.crt --client-key=$USERNAME.key --embed-certs
          #### Set the context
          kubectl config set-context $USERNAME-context --user=$USERNAME --cluster=$CLUSTER
          # Delete CSR
          kubectl delete csr $USERNAME
  - name: step-04
    try:
    - apply:
        file: chainsaw-step-04-apply-1.yaml
    - apply:
        file: chainsaw-step-04-apply-2.yaml
  - name: step-05
    try:
    - script:
        content: |
          #!/bin/bash
          node=$(kubectl get nodes --no-headers | awk '{print $1}' | head -n 1)
          if kubectl --context nodelabeluser-context label node "$node" foo=bar; then
              echo "Failed: Success altering node label by nodelabeluser";
              exit 1;
          else
              echo "Success: Failed to alter node label by nodelabeluser";
              exit 0;
          fi;
    - script:
        content: |
          #!/bin/bash
          node=$(kubectl get nodes --no-headers | awk '{print $1}' | head -n 1)
          if kubectl label node "$node" foo=bar; then
              echo "Success altering node label by cluster-admin";
              exit 0;
          else
              echo "Failed to alter node label by cluster-admin";
              exit 1;
          fi;
  - name: step-06
    try:
    - script:
        content: |
          kubectl get configmap -n kyverno kyverno -o yaml | sed 's/\[APIService,\*,\*\]/\[Node,\*,\*\] \[Node\/\*,\*,\*\] \[APIService,\*,\*\]/g' - | kubectl apply -f -
          node=$(kubectl get nodes --no-headers | awk '{print $1}' | head -n 1)
          kubectl label nodes "$node" foo=bar
          kubectl label nodes "$node" foo=bar
          kubectl config unset users.nodelabeluser
          kubectl config unset contexts.nodelabeluser-context
