apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: get-debug-data-policy
  annotations:
    policies.kyverno.io/title: Collect debug information for pods in crashloopback
    policies.kyverno.io/category: Other
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Deployment
    kyverno.io/kyverno-version: 1.11.5
    kyverno.io/kubernetes-version: "1.27"
    policies.kyverno.io/description: "This policy generates a job which gathers troubleshooting data (including logs, kubectl describe output and events from the namespace) from pods that are in crashloopback and have 3 restarts. This data can further be used to automatically create a jira issue using some kind of automation or another Kyverno policy. For more information on how the image used in this policy was built, see https://github.com/nirmata/SRE-Operational-Usecases/tree/main/get-troubleshooting-data/get-debug-data. "
spec:
  rules:
  - name: get-debug-data-policy-rule
    match:
      any:
      - resources:
          kinds:
          - v1/Pod.status
    context:
    - name: pdcount
      apiCall:
        urlPath: "/api/v1/namespaces/{{request.namespace}}/pods?labelSelector=requestpdname=pod-{{request.object.metadata.name}}"
        jmesPath: "items | length(@)"
    preconditions:
      all:
      - key: "{{ sum(request.object.status.containerStatuses[*].restartCount || [`0`]) }}"
        operator: Equals
        value: 3
      - key: "{{ request.object.metadata.labels.deleteme || '' | length(@) }}"
        operator: Equals
        value: 0
      - key: "{{ pdcount }}"
        operator: Equals
        value: 0
    generate:
      apiVersion: batch/v1
      kind: Job
      name: get-debug-data-{{request.object.metadata.name}}-{{ random('[0-9a-z]{8}') }}
      namespace: "{{request.namespace}}"
      synchronize: false
      data:
        metadata:
          labels:
            deleteme: allow
        spec:
          template:
            metadata:
              labels:
                app: my-app
                deleteme: allow
                requestpdname: "pod-{{request.object.metadata.name}}"
            spec:
              restartPolicy: OnFailure
              containers:
              - name: my-container
                image: sagarkundral/my-python-app:v52
                ports:
                - containerPort: 8080
                volumeMounts:
                - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                  name: token
                  readOnly: true
                args:
                - "/app/get-debug-jira-v2.sh"
                - "{{request.namespace}}"
                - "{{request.object.metadata.name}}"
              volumes:
              - name: token
                projected:
                  defaultMode: 420
                  sources:
                  - serviceAccountToken:
                      expirationSeconds: 3607
                      path: token
                  - configMap:
                      items:
                      - key: ca.crt
                        path: ca.crt
                      name: kube-root-ca.crt
