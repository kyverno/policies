apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: ephemeral-credentials-validator
  annotations:
    policies.kyverno.io/title: Ephemeral Credentials Validator
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Secret
    policies.kyverno.io/minversion: 1.9.0
    policies.kyverno.io/description: >-
      This policy enforces the use of ephemeral credentials with defined time-to-live (TTL)
      periods. It requires that all secrets have a specified maximum lifetime, enforces different
      TTL values based on secret sensitivity, and ensures integration with credential rotation
      mechanisms. This reduces the risk of credential compromise and helps implement zero-trust
      security models.
    policies.kyverno.io/description-message: >-
      Secret %{request.object.metadata.name} must have a TTL annotation and be configured
      for automatic rotation. Permanent credentials are not allowed.
    kyverno.io/kyverno-version: 1.9.0
    kyverno.io/kubernetes-version: "1.23-1.26"
    policies.kyverno.io/terms: ephemeral credentials ttl secret-rotation credential-management
spec:
  validationFailureAction: Audit
  background: true
  rules:
    # Rule 1: Require TTL Annotation on all secrets
    - name: require-ttl-annotation
      match:
        any:
        - resources:
            kinds:
              - Secret
      exclude:
        any:
        - resources:
            namespaces:
              - kube-system
              - kube-public
              - kube-node-lease
            name: "*.sa-token-*"
      validate:
        message: "Secret must have a 'secrets.kubernetes.io/ttl' annotation with a valid duration (e.g., '72h', '30d')."
        pattern:
          metadata:
            annotations:
              "secrets.kubernetes.io/ttl": "?*"
    
    # Rule 2: Enforce Maximum TTL Based on Secret Type
    - name: enforce-maximum-ttl
      match:
        any:
        - resources:
            kinds:
              - Secret
      exclude:
        any:
        - resources:
            namespaces:
              - kube-system
              - kube-public
              - kube-node-lease
      context:
        - name: ttl
          variable:
            jmesPath: "metadata.annotations.\"secrets.kubernetes.io/ttl\" || '0d'"
        - name: secretType
          variable:
            jmesPath: "type || 'Opaque'"
      validate:
        message: >-
          Secret TTL exceeds the maximum allowed duration for type {{secretType}}.
          High-sensitivity secrets: max 24h, Medium: max 7d, Low: max 30d.
        deny:
          conditions:
            any:
            - key: "{{ secretType }}"
              operator: Equals
              value: "kubernetes.io/tls"
              message: "TLS secrets must have TTL <= 90d"
            - key: "{{ secretType }}"
              operator: Equals
              value: "kubernetes.io/service-account-token"
              message: "ServiceAccount token secrets must have TTL <= 24h"
            - key: "{{ secretType }}"
              operator: Equals
              value: "kubernetes.io/dockerconfigjson"
              message: "DockerConfig secrets must have TTL <= 30d"
            - key: "{{ secretType }}"
              operator: Equals
              value: "Opaque"
              message: "Opaque secrets must have TTL <= 7d"
    
    # Rule 3: Require Rotation Mechanism
    - name: require-rotation-mechanism
      match:
        any:
        - resources:
            kinds:
              - Secret
      exclude:
        any:
        - resources:
            namespaces:
              - kube-system
              - kube-public
              - kube-node-lease
      validate:
        message: "Secret must have a rotation mechanism specified via the annotation 'secrets.kubernetes.io/rotation-mechanism'"
        pattern:
          metadata:
            annotations:
              "secrets.kubernetes.io/rotation-mechanism": "?*"
    
    # Rule 4: Generate Reports for Expiring Secrets (using PolicyReport CRD)
    - name: generate-expiry-report
      match:
        any:
        - resources:
            kinds:
              - Secret
      exclude:
        any:
        - resources:
            namespaces:
              - kube-system
              - kube-public
              - kube-node-lease
      context:
        - name: creationTime
          variable:
            jmesPath: "metadata.creationTimestamp"
        - name: ttl
          variable:
            jmesPath: "metadata.annotations.\"secrets.kubernetes.io/ttl\" || '0d'"
      verifyImages:
        - imageReferences:
          - "*"
          attestors:
          - entries:
            - keys: {}
          attestations:
          - predicateType: https://secrets.kubernetes.io/expiry
            conditions:
              all:
              - key: "{{ creationTime }} + {{ ttl }}"
                operator: LessThan
                value: "{{ time.now() }} + 7d"
                message: "Secret will expire within 7 days" 