apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: deny-privileged-profile
spec:
  steps:
  - name: step-01
    try:
    - script:
        content: |
          sed 's/validationFailureAction: audit/validationFailureAction: Enforce/' ../deny-privileged-profile.yaml | kubectl create -f -
    - assert:
        file: chainsaw-step-01-assert-1.yaml
  - name: step-02
    try:
    - script:
        content: |
          #!/bin/bash
          set -eu
          export USERNAME=denyprivilegeduser
          export CA=ca.crt
          #### Get CA certificate from kubeconfig assuming it's the first in the list.
          kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}' | base64 --decode > ./ca.crt
          #### Set CLUSTER_SERVER from kubeconfig assuming it's the first in the list.
          CLUSTER_SERVER="$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.server}')"
          #### Set CLUSTER from kubeconfig assuming it's the first in the list.
          CLUSTER="$(kubectl config view --raw -o jsonpath='{.clusters[0].name}')"
          #### Generate private key
          openssl genrsa -out $USERNAME.key 2048
          #### Create CSR
          openssl req -new -key $USERNAME.key -out $USERNAME.csr -subj "/O=testorg/CN=$USERNAME"
          #### Send CSR to kube-apiserver for approval
          cat <<EOF | kubectl apply -f -
          apiVersion: certificates.k8s.io/v1
          kind: CertificateSigningRequest
          metadata:
            name: $USERNAME
          spec:
            request: $(cat $USERNAME.csr | base64 | tr -d '\n')
            signerName: kubernetes.io/kube-apiserver-client
            usages:
            - client auth
          EOF
          #### Approve CSR
          kubectl certificate approve $USERNAME
          #### Download certificate
          kubectl get csr $USERNAME -o jsonpath='{.status.certificate}' | base64 --decode > $USERNAME.crt
          ####
          #### Create the credential object and output the new kubeconfig file
          kubectl config set-credentials $USERNAME --client-certificate=$USERNAME.crt --client-key=$USERNAME.key --embed-certs
          #### Set the context
          kubectl config set-context $USERNAME-context --user=$USERNAME --cluster=$CLUSTER
          # Delete CSR
          kubectl delete csr $USERNAME
  - name: step-03
    try:
    - apply:
        file: chainsaw-step-03-apply-1.yaml
    - apply:
        file: chainsaw-step-03-apply-2.yaml
  - name: step-04
    try:
    - command:
        args:
        - --context=denyprivilegeduser-context
        - create
        - -f
        - ns-good.yaml
        entrypoint: kubectl
    - script:
        content: if kubectl --context=denyprivilegeduser-context create -f ns-bad.yaml;
          then exit 1; else exit 0; fi
    - command:
        args:
        - delete
        - -f
        - ns-good.yaml
        entrypoint: kubectl
    - command:
        args:
        - "5"
        entrypoint: sleep
  - name: step-05
    try:
    - apply:
        file: ns-good.yaml
    - apply:
        file: ns-bad.yaml
  - name: step-99
    try:
    - delete:
        ref:
          apiVersion: kyverno.io/v1
          kind: ClusterPolicy
          name: deny-privileged-profile
    - command:
        args:
        - config
        - unset
        - users.denyprivilegeduser
        entrypoint: kubectl
    - command:
        args:
        - config
        - unset
        - contexts.denyprivilegeduser-context
        entrypoint: kubectl
